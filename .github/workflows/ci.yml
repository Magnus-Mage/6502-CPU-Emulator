- name: Setup MinGW (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-makename: 6502 Emulator CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  # Job 1: Build and Test on Multiple Platforms
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
          - os: macos-latest
            generator: "Unix Makefiles"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MinGW (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-make

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Clone Google Test
      run: |
        git clone https://github.com/google/googletest.git
        cd googletest
        git checkout release-1.12.1

    - name: Configure CMake
      run: |
        cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel 4

    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure --parallel 4 -C ${{ matrix.build_type }}

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/Testing/
          build/*test*.xml

    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: emulator-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/emulator_tests
          build/libemulator_lib.*

  # Job 2: Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/ tests/ || true

    - name: Check code formatting
      run: |
        find src tests -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror || true

    - name: Run clang-tidy (if available)
      run: |
        # This is optional since we don't have a compile_commands.json
        echo "Clang-tidy would run here with proper setup"

  # Job 3: Memory Safety Testing (Valgrind on Linux)
  memory-safety:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake valgrind

    - name: Clone Google Test
      run: |
        git clone https://github.com/google/googletest.git
        cd googletest
        git checkout release-1.12.1

    - name: Build with Debug symbols
      run: |
        cmake -S . -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug
        cmake --build build

    - name: Run tests with Valgrind
      run: |
        valgrind --tool=memcheck --leak-check=full --error-exitcode=1 ./build/emulator_tests || true

  # Job 4: Performance Benchmarking (Optional)
  benchmark:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Clone Google Test
      run: |
        git clone https://github.com/google/googletest.git
        cd googletest
        git checkout release-1.12.1

    - name: Build Release
      run: |
        cmake -S . -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
        cmake --build build

    - name: Run performance tests
      run: |
        # Add timing to your tests or create separate benchmark
        time ./build/emulator_tests

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      if: false  # Disable until you have actual benchmark data
      with:
        tool: 'googlecpp'
        output-file-path: benchmark_result.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Job 5: Create Release Artifacts
  release:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release package
      run: |
        mkdir -p release-package
        cp -r emulator-*/* release-package/ || true
        cp README.md release-package/
        cp TODO.md release-package/
        tar -czf 6502-emulator-${{ github.event.release.tag_name }}.tar.gz release-package/

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./6502-emulator-${{ github.event.release.tag_name }}.tar.gz
        asset_name: 6502-emulator-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  # Job 6: Deploy Documentation (if you add docs)
  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Pages
      if: false  # Enable when you have documentation
      uses: actions/configure-pages@v3

    - name: Build documentation
      if: false  # Enable when you have documentation
      run: |
        # Add documentation build commands here
        # e.g., doxygen, sphinx, etc.
        echo "Documentation build would go here"

    - name: Deploy to GitHub Pages
      if: false  # Enable when you have documentation
      uses: actions/deploy-pages@v2

  # Job 7: Notification
  notification:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-test.result == 'success' && needs.code-quality.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify on failure
      if: needs.build-and-test.result == 'failure' || needs.code-quality.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1
